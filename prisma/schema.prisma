generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model RoleAccess {
  id        Int       @id @default(autoincrement()) @map("role_id")
  roleName  String    @unique @map("role_name")
  createdAt DateTime? @map("created_at")
  updatedAt DateTime? @map("updated_at")
  users     User[]

  @@map("role_access")
}

enum Status {
  active
  inactive
}

model User {
  id              Int           @id @default(autoincrement()) @map("user_id")
  personnelId     String?       @unique @map("personnel_id")
  name            String?
  status          Status        
  password        String
  role            String?        
  email           String        @unique
  emailVerifiedAt DateTime?     @map("email_verified_at")
  photoUrl        String?       @map("photo_url")
  roleId          Int           @map("role_id")
  createdAt       DateTime?     @map("created_at")
  updatedAt       DateTime?     @map("updated_at")
  roleAccess      RoleAccess    @relation(fields: [roleId], references: [id])
  projectUsers    ProjectUser[]
  sessions        Session[]
  tasks           Task[]

  @@map("users")
}

model ProjectStatus {
  id         Int       @id @default(autoincrement()) @map("status_id")
  statusName String    @unique @map("status_name")
  projects   Project[]

  @@map("project_status")
}

model Project {
  id           Int           @id @default(autoincrement()) @map("project_id")
  projectCode  String        @unique @map("project_code")
  projectName  String        @map("project_name")
  projectOwner String        @map("project_owner")
  statusId     Int           @map("status_id")
  startDate    DateTime?     @map("start_date") @db.Date
  endDate      DateTime?     @map("end_date") @db.Date
  createdAt    DateTime?     @map("created_at")
  updatedAt    DateTime?     @map("updated_at")
  status       ProjectStatus @relation(fields: [statusId], references: [id])
  projectUsers ProjectUser[]
  tasks        Task[]

  @@map("project")
}

model ProjectUser {
  projectId Int     @map("project_id")
  userId    Int     @map("user_id")
  project   Project @relation(fields: [projectId], references: [id])
  user      User    @relation(fields: [userId], references: [id])

  @@id([projectId, userId])
  @@map("project_users")
}

model Session {
  id           String    @id
  sessionToken String    @unique @map("session_token")
  userId       Int       @map("user_id")
  expires      DateTime?
  user         User      @relation(fields: [userId], references: [id])

  @@map("sessions")
}

model VerificationToken {
  token      String    @id
  identifier String
  expires    DateTime?

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// New tables for task management

model Checklist {
  id                 Int                 @id @default(autoincrement()) @map("checklist_id")
  criteria           String
  createdAt          DateTime?           @map("created_at")
  updatedAt          DateTime?           @map("updated_at")
  templateChecklists TemplateChecklist[]
  taskProgresses     TaskProgress[]

  @@map("checklists")
}

model TaskTemplate {
  id                 Int                 @id @default(autoincrement()) @map("template_id")
  templateName       String              @unique @map("template_name")
  createdAt          DateTime?           @map("created_at")
  updatedAt          DateTime?           @map("updated_at")
  templateChecklists TemplateChecklist[]
  tasks              Task[]

  @@map("task_templates")
}

model TemplateChecklist {
  id          Int          @id @default(autoincrement())
  templateId  Int          @map("template_id")
  checklistId Int          @map("checklist_id")
  template    TaskTemplate @relation(fields: [templateId], references: [id])
  checklist   Checklist    @relation(fields: [checklistId], references: [id])

  @@map("template_checklists")
}

model DocumentType {
  id    Int    @id @default(autoincrement()) @map("document_type_id")
  name  String @map("name") @db.VarChar(100)
  tasks Task[]

  @@map("document_type")
}

model Task {
  id          Int            @id @default(autoincrement()) @map("task_id")
  taskName    String         @map("task_name")
  documentTypeId Int            @map("document_type_id")
  templateId  Int            @map("template_id")
  projectId   Int            @map("project_id")
  userId      Int            @map("user_id")
  dateAdded   DateTime       @map("date_added")
  iteration   Int
  documentType   DocumentType   @relation(fields: [documentTypeId], references: [id])
  template    TaskTemplate   @relation(fields: [templateId], references: [id])
  project     Project        @relation(fields: [projectId], references: [id])
  user        User           @relation(fields: [userId], references: [id])
  progresses  TaskProgress[]

  @@map("tasks")
}

model TaskProgress {
  id          Int       @id @default(autoincrement()) @map("progress_id")
  taskId      Int       @map("task_id")
  checklistId Int       @map("checklist_id")
  checked     Boolean   @default(false)
  comment     String?
  updatedAt   DateTime? @map("updated_at")
  task        Task      @relation(fields: [taskId], references: [id])
  checklist   Checklist @relation(fields: [checklistId], references: [id])

  @@map("task_progress")
}